@page "/SongDownload"
@using System.Diagnostics
@using VideoLibrary
@using System
@using System.IO
@using Xabe.FFmpeg
@inject IWebHostEnvironment Environment

<PageTitle>Song Download</PageTitle>
<html>

<head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body>
    <header>

    </header>
    <main>
        @* <input class="songDownload" type="text" @bind="link" placeholder="YouTube link">
            <button @onclick="Download">
            Download
            </button>

            @if (isDone)
            {
            <h1>
            Downloaded successfully
            </h1>
            }
            @videofullnewpath *@

        <div class="row height d-flex justify-content-center align-items-center">

            <div class="col-md-6">

                <div class="form">
                    <i class="fa fa-search"></i>
                    <input type="text" @bind="link" class="form-control form-input" placeholder="Search anything...">
                    <span class="left-pan"><i class="fa fa-microphone"></i></span>

                    <button class="songDownload" @onclick="Download">Download</button>

                    @if (isDone)
                    {
                        <h1>
                            Downloaded successfully
                        </h1>
                    }
                    @videofullnewpath
                </div>

            </div>

        </div>

    </main>
    <footer>

    </footer>
</body>

</html>

@code {
    public static bool isfirst = true;
    public static bool isDone = false;
    public static string link { get; set; }
    public static string DirectorySongs { get; set; }
    public static string home { get; set; }
    public static string videoname { get; set; }
    public static string videofullpath { get; set; }
    public static string videofullnewpath { get; set; }

    public static void Download()
    {
        using (var service = Client.For(YouTube.Default))
        {
            while (isfirst)
            {
                isfirst = false;
                var video = service.GetVideo(link);
                string folder = DirectorySongs;
                string path = Path.Combine(folder, video.FullName);
                videoname = video.FullName;
                File.WriteAllBytes(path, video.GetBytes());
                isDone = true;
            }
        }
        videofullpath = Path.Combine(DirectorySongs, videoname);
        videofullnewpath = (videofullpath.Remove(videofullpath.Length - 4, 4) + ".mp3");
    }
    static void ConvertMP4ToMP3()
    {

    }

    protected override void OnInitialized()
    {
        home = Environment.ContentRootPath;
        DirectorySongs = Path.Combine(home, "wwwroot/Songs");
    }

}