@page "/SongDownload"
@using VideoLibrary
@using System
@using System.IO
@inject IWebHostEnvironment Environment

<PageTitle>Song Download</PageTitle>
<html>

<head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body>
    <header>
        
    </header>
    <main>
        <div class="row height d-flex justify-content-center align-items-center">

            <div class="col-md-6">
                <h1 class="title2">Download your favorite music from YouTube</h1>
                <div class="form">
                    <i class="fa fa-search"></i>
                    @if (isLoading)
                    {
                        <div class="spinner-border text-light" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }

                    @if (!isDone)
                    {
                        <input type="text" @bind="link" class="form-control form-input" placeholder="Search anything...">
                        <button class="songDownload" @onclick="(() => {Download();})">Download</button>
                    }
                    else
                    {
                        <h1>
                            Downloaded successfully
                        </h1>
                        <button @onclick="ResetValues">Download other song?</button>
                    }
                </div>

            </div>

        </div>

    </main>
    <footer>
        <div class="container">
            <div class="rows">
                <p class="copyright-text">Copyright MT & JS &copy; 2022</p>
                <ul class="social-icons">
                    <li><a class="facebook" href="https://www.facebook.com/"><i class="fa fa-facebook"></i></a></li>
                    <li><a class="twitter" href="https://www.twitter.com/"><i class="fa fa-twitter"></i></a></li>
                    <li><a class="dribbble" href="https://www.dribbble.com/"><i class="fa fa-dribbble"></i></a></li>
                    <li><a class="whatsapp" href="https://www.whatsapp.com/"><i class="fa fa-whatsapp"></i></a></li>
                    <li><a class="instagram" href="https://www.instagram.com/"><i class="fa fa-instagram"></i></a></li>
                </ul>
            </div>
        </div>
    </footer>
</body>

</html>

@code {
    public static bool isDone = false;
    public static string link { get; set; }
    public static string DirectorySongs { get; set; }
    public static string DirectoryVids { get; set; }
    public static string home { get; set; }
    public static string videoname { get; set; }
    public static string videofullpath { get; set; }
    public static string videofullnewpath { get; set; }
    private static int totalSec { get; set; }
    private static int totalMin { get; set; }
    private static string duration { get; set; } = "";
    private bool isLoading;

    private static void Download()
    {
        using (var service = Client.For(YouTube.Default))
        {
            var video = service.GetVideo(link);
            string folder = DirectoryVids;
            string path = Path.Combine(folder, video.FullName);
            videoname = video.FullName;
            File.WriteAllBytes(path, video.GetBytes());
            isDone = true;
        }
        videofullpath = Path.Combine(DirectoryVids, videoname);
        videofullnewpath = Path.Combine(DirectorySongs, videoname.Remove(videoname.Length - 4, 4) + ".mp3");
        ConvertMP4ToMP3();
    }
    private static void ConvertMP4ToMP3()
    {
        System.IO.File.Copy(videofullpath, videofullnewpath);
        TagLib.File Vfile = TagLib.File.Create(videofullpath);
        int s_time = (int)Vfile.Properties.Duration.TotalSeconds;
        int s_minutes = s_time / 60;
        int s_seconds = s_time % 60;
        totalMin = s_minutes;
        totalSec = s_seconds;
        if (totalSec < 10)
        {
            duration = "0" + s_minutes.ToString() + ":" + "0" + s_seconds.ToString();
        }
        else
        {
            duration = "0" + s_minutes.ToString() + ":" + s_seconds.ToString();
        }
        System.IO.File.Delete(videofullpath);

        using (StreamWriter writer = new StreamWriter(videofullpath.Remove(videofullpath.Length - 4, 4) + ".txt",true))
        {
            writer.WriteLine(duration);
        }


    }
    protected override void OnInitialized()
    {
        ResetValues();
        home = Environment.ContentRootPath;
        DirectorySongs = Path.Combine(home, "wwwroot/Songs");
        DirectoryVids = Path.Combine(home, "wwwroot/Vids");
    }
    private void ResetValues()
    {
        link = "";
        isDone = false;
    }
}