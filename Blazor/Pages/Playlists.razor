@page "/playlist"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject ILogger<Playlists> Logger
@inject IWebHostEnvironment Environment

<head>
    <PageTitle>Playlists</PageTitle>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body>
    <header>

    </header>
    <main>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Songs</th>
                                <th>
                                    @* <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" cursor="pointer"
                                        fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                                        <path
                                        d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2
                                        0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" />
                                        <path
                                        d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1
                                        0-1h3v-3A.5.5 0 0 1 8 4z" />
                                        </svg> *@
                                    @if (!IsCreatingNewPlaylist)
                                    {
                                        <button @onclick="StartCreatingPlaylist"> Create New
                                            Playlist</button>
                                    }
                                </th>
                                <th class="move">
                                    <div class="top-row searchColor">
                                        <div class="input-group">
                                            <input type="search" class="form-control rounded"
                                                placeholder="Search your favorite playlist..." aria-label="Search"
                                                aria-describedby="search-addon" />
                                            <button type="button" class="btn">
                                                <i class="material-icons differentColor">search</i>
                                            </button>
                                        </div>
                                    </div>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (IsCreatingNewPlaylist)
                            {
                                <input type="text" @bind="PlaylistName" placeholder="Playlist Name">
                                <select multiple @onchange="SelectedSongsChange">
                                    @foreach (var Song in SongList)
                                    {
                                        <option value="@Song"> @Song.Name</option>
                                    }
                                </select>
                                <button @onclick="CreateNewPlayList">
                                    Create
                                </button>
                            }
                            @* @foreach (var playList in @PlayLists)
                            {
                                <tr>
                                    <th>
                                        @if (playList.Name != "")
                                        {
                                            @playList.Name
                                        }
                                    </th>
                                </tr>
                            } *@

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>
    <footer>
        <div class="container">
            <div class="rows">
                <p class="copyright-text">Copyright MT & JS &copy; 2022</p>
                <ul class="social-icons">
                    <li><a class="facebook" href="https://www.facebook.com/"><i class="fa fa-facebook"></i></a></li>
                    <li><a class="twitter" href="https://www.twitter.com/"><i class="fa fa-twitter"></i></a></li>
                    <li><a class="dribbble" href="https://www.dribbble.com/"><i class="fa fa-dribbble"></i></a></li>
                    <li><a class="whatsapp" href="https://www.whatsapp.com/"><i class="fa fa-whatsapp"></i></a></li>
                    <li><a class="instagram" href="https://www.instagram.com/"><i class="fa fa-instagram"></i></a></li>
                </ul>
            </div>
        </div>
    </footer>
</body>
@code {
    private static List<MusicPlayList> PlayLists { get; set; }
    private static List<Song> SongList = new List<Song>();
    public string PlaylistName { get; set; }
    private static List<Song> ChoosenSongs = new List<Song>();
    private string[] SelectedSongs { get; set; }
    public bool IsCreatingNewPlaylist { get; set; } = false;
    public string DirectorySongs { get; set; }
    public string? SelectedSongasString { get; set; } = "";
    public Song SelectedSongasSong { get; set; }
    public string[]? NameAndPath { get; set; }
    public string? path { get; set; }
    public string? fullPath { get; set; }
    public string? Songname { get; set; }

    protected override void OnInitialized()
    {
        DirectorySongs = Path.Combine(Environment.ContentRootPath, "wwwroot/Songs");
        GetSongs();
    }
    public void GetSongs()
    {
        Song.AddSongsToList(DirectorySongs, ref SongList);
    }
    public void StartCreatingPlaylist()
    {
        IsCreatingNewPlaylist = true;
    }
    public void CreateNewPlayList()
    {
        MusicPlayList newPlaylist = new MusicPlayList(ChoosenSongs, PlaylistName);
        PlayLists.Add(newPlaylist);
    }
    void SelectedSongsChange(ChangeEventArgs e)
    {
        ChoosenSongs.Clear();
        if (e.Value is not null)
        {
            SelectedSongs = (string[])e.Value;
            foreach (var choosensong in SelectedSongs)
            {
                string selectedSong;
                string[] nameAndPath = new string[] { };
                string temppath = "";
                string songname = "";
                selectedSong = (string?)e?.Value;
                Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
                AssignValues(selectedSong, nameAndPath, temppath, songname);

                ChoosenSongs.Add(SelectedSongasSong);
            }
        }
    }
    public void AssignValues(string selectedSong, string[] nameAndPath, string temppath, string songname)
    {
        SelectedSongasString = selectedSong;
        NameAndPath = nameAndPath;
        path = temppath;
        Songname = songname;
        SelectedSongasSong = new Song(songname, path);
        fullPath = Path.Combine(DirectorySongs, path.Remove(0, 7));
    }

}
