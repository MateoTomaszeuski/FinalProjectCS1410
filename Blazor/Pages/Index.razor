@page "/"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Timers
@inject ILogger<Index> Logger
@inject IWebHostEnvironment Environment
@implements IDisposable

<html>

<head>
    <PageTitle>Home</PageTitle>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body>
    <header>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="top-row searchColor">
                        <div class="input-group">
                            <input @bind="SearchedSong" type="search" class="form-control rounded"
                                placeholder="Search your favorite music..." aria-label="Search"
                                aria-describedby="search-addon" />
                            @if (SearchedSong != "")
                            {
                                <button type="button" class="btn" @onclick="SearchSong">
                                    <i class="material-icons differentColor">search</i>
                                </button>
                            }
                        </div>
                        @if (!songwasfinded)
                        {
                            <h4>
                                Are you looking for:
                            </h4>
                            @foreach (var Song in RecomendedSongList)
                            {
                                <tr>
                                    <th>
                                        @if (Song.Name != "")
                                        {
                                            @Song.Name
                                            <button class="btnSong1" @onclick="(() => {GetSelectedSong(Song.Name); PlayStop(); })">
                                                @if (!Play)
                                                {
                                                    <i class="material-icons iconMargin">play_circle_filled</i>
                                                }
                                                else if (Play)
                                                {
                                                    <i class="material-icons iconMargin">play_circle_filled</i>
                                                }
                                            </button>
                                        }
                                    </th>
                                </tr>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </header>

    <main>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="player">
                        <div class="player-controls">
                            <div class="player-controls-left">
                                <div class="player-controls-left-item">
                                    <div class="player-controls-left-item-icon icon-bar">
                                        <a href="">
                                            <button class="playAndStopButton" @onclick="nextSong" @onmouseup="nextSong">
                                                <i class="material-icons differentColor">skip_next</i>
                                            </button>
                                        </a>
                                        <a class="borders" href="">
                                            <button class="playAndStopButton" @onclick="PlayStop">
                                                @if (!Play)
                                                {
                                                    <i class="material-icons differentColor">pause_circle_filled</i>
                                                }
                                                else if (Play)
                                                {
                                                    <i class="material-icons differentColor">play_circle_filled</i>
                                                }
                                            </button>
                                        </a>
                                        <a href="">
                                            <button class="playAndStopButton" @onclick="MuteUnmute">
                                                @if (!Mute)
                                                {
                                                    <i class="material-icons differentColor">volume_up</i>
                                                }
                                                else if (Mute)
                                                {
                                                    <i class="material-icons differentColor">volume_off</i>
                                                }
                                            </button>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <h1>
                @if (songwasfinded)
                {
                    <select class="form-control barNewColors" @onchange="SelectedSongChanged">

                        @foreach (var Song in SongList)
                        {
                            <option value="@Song"> @Song.Name</option>
                        }
                    </select>
                }
                @if (SelectedSongasString != "")
                {
                    <div class="row">
                        <div class="col-md-12">
                            <div class="audio-player">
                                <div class="audio-wrapper" id="player-container" href="javascript:;"> </div>
                                <div class="player-controls scrubber">
                                    <p>@Songname</p>
                                    <span id="seek-obj-container">
                                        <div class="card-body">
                                            @if (!Play)
                                            {
                                                @if (!Mute)
                                                {
                                                    <audio autoplay id="player" @ontimeupdate="displaytimeupdate"
                                            @onended="nextSong">
                                                        <source src="@path#t=00:@currenttime" />
                                                    </audio>
                                                    <div class="progress">
                                                        <div class="progress-bar" role="progressbar" style="width: @percentaje%">
                                                        </div>
                                                    </div>
                                                    <div class="timeLine">
                                                        @timeline
                                                    </div>
                                                }
                                                else if (Mute)
                                                {
                                                    <audio autoplay id="player" @ontimeupdate="displaytimeupdate">
                                                        <source src="/muted/zzz.mp3" />
                                                    </audio>
                                                    <div class="progress">
                                                        <div class="progress-bar" role="progressbar" style="width: @percentaje%">
                                                        </div>
                                                    </div>
                                                    <div class="timeLine">
                                                        @timeline
                                                    </div>
                                                }

                                            }
                                            else if (Play)
                                            {
                                                <audio muted id="player" @onactivate="displaytimeupdate">
                                                    <source src="@path#t=00:@currenttime" />
                                                </audio>
                                                <div class="progress">
                                                    <div class="progress-bar" role="progressbar" style="width: @percentaje%">
                                                    </div>
                                                </div>
                                                <div class="timeLine">
                                                    @timeline
                                                </div>
                                            }
                                        </div>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </h1>
        </div>
    </main>
    <footer>
        <div class="container">
            <div class="rows">
                <p class="copyright-text">Copyright MT & JS &copy; 2022</p>
                <ul class="social-icons">
                    <li><a class="facebook" href="https://www.facebook.com/"><i class="fa fa-facebook"></i></a></li>
                    <li><a class="twitter" href="https://www.twitter.com/"><i class="fa fa-twitter"></i></a></li>
                    <li><a class="dribbble" href="https://www.dribbble.com/"><i class="fa fa-dribbble"></i></a></li>
                    <li><a class="whatsapp" href="https://www.whatsapp.com/"><i class="fa fa-whatsapp"></i></a></li>
                    <li><a class="instagram" href="https://www.instagram.com/"><i class="fa fa-instagram"></i></a></li>
                </ul>
            </div>
        </div>
    </footer>
</body>

</html>
@code {
    List<Song> SongList = new List<Song>();
    List<Song> RecomendedSongList = new List<Song>();
    private string[]? NameAndPath { get; set; }
    private string? DirectorySongs;
    private string? DirectoryVids;
    private string SearchedSong { get; set; } = "";
    private string? SelectedSongasString { get; set; } = "";
    private string? path { get; set; }
    private string? fullPath { get; set; }
    private string? Songname { get; set; }
    private string duration { get; set; } = "";
    private string currenttime { get; set; }
    private string timeline { get; set; }
    private int minCount { get; set; } = 0;
    private int secCount { get; set; } = 0;
    private int totalMin { get; set; }
    private int currentMin { get; set; } = 0;
    private int totalSec { get; set; }
    private int currentSec { get; set; } = 0;
    private int songpositon { get; set; } = -1;
    private double percentaje { get; set; }
    private bool FistSelection { get; set; } = true;
    private bool Play { get; set; } = true;
    private bool Mute { get; set; } = false;
    private bool songwasfinded { get; set; } = true;
    private Timer timer { get; set; }
    private void GetSelectedSong(string SearchedSong)
    {
        songwasfinded = true;
        for (int i = 0; i < SongList.Count; i++)
        {
            if (SearchedSong == SongList[i].Name)
            {
                songpositon = i;
            }
        }
        if (songpositon != -1)
        {
            string selectedSong = SongList[songpositon].ToString();
            string[] nameAndPath = new string[] { };
            string temppath = "";
            string songname = "";
            Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
            AssignValues(selectedSong, temppath, songname);
            AudioDuration(fullPath);
            secCount = 0;
            minCount = 0;
            currentMin = 0;
            currentSec = 0;
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
        }
        else
        {
            RecomendedSongList.Clear();
            RecomendedSongList.Add(new Song("", ""));
            songwasfinded = false;
            for (int i = 0; i < SongList.Count; i++)
            {
                if (SongList[i].Name.ToUpper().Contains(SearchedSong.ToUpper()))
                {
                    RecomendedSongList.Add(SongList[i]);
                }
            }
        }
        SearchedSong = "";
    }
    private void SearchSong()
    {
        songwasfinded = true;
        for (int i = 0; i < SongList.Count; i++)
        {
            if (SearchedSong == SongList[i].Name)
            {
                songpositon = i;
                break;

            }
        }
        if (songpositon != -1)
        {
            string selectedSong = SongList[songpositon].ToString();
            string[] nameAndPath = new string[] { };
            string temppath = "";
            string songname = "";
            Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
            AssignValues(selectedSong, temppath, songname);
            AudioDuration(fullPath);

            secCount = 0;
            minCount = 0;
            currentMin = 0;
            currentSec = 0;
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
            if (!Play) PlayStop();
            if (FistSelection)
            {
                FistSelection = false;
                PlayStop();
            }
        }
        else
        {
            RecomendedSongList.Clear();
            RecomendedSongList.Add(new Song("", ""));
            songwasfinded = false;
            for (int i = 0; i < SongList.Count; i++)
            {
                if (SongList[i].Name.ToUpper().Contains(SearchedSong.ToUpper()))
                {
                    RecomendedSongList.Add(SongList[i]);
                }
            }
        }
        SearchedSong = "";
    }
    private void displaytimeupdate()
    {
        timeline = currenttime + "/" + duration;
        getpercentaje();
    }

    private void nextSong()
    {
        if (!Play)
        {
            PlayStop();

            string[] nameAndPath = new string[] { };
            string temppath = "";
            string songname = "";
            string selectedSong = "";

            Song.nextSong(SongList, Songname, songpositon, ref selectedSong, ref nameAndPath!, ref temppath, ref songname);

            AssignValues(selectedSong, temppath, songname);
            AudioDuration(fullPath);

            secCount = 0;
            minCount = 0;
            currentMin = 0;
            currentSec = 0;
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
        }
        else
        {
            PlayStop();
        }
    }
    private void SelectedSongChanged(ChangeEventArgs e)
    {
        songwasfinded = true;
        string selectedSong;
        string[] nameAndPath = new string[] { };
        string temppath = "";
        string songname = "";
        selectedSong = (string?)e?.Value;
        Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
        AssignValues(selectedSong, temppath, songname);

        AudioDuration(fullPath);
        secCount = 0;
        minCount = 0;
        currentSec = 0;
        currentMin = 0;
        if (!Play) PlayStop();
        if (FistSelection)
        {
            FistSelection = false;
            PlayStop();
        }
    }
    private void AssignValues(string selectedSong, string temppath, string songname)
    {
        SelectedSongasString = selectedSong;
        path = temppath;
        Songname = songname;
        fullPath = Path.Combine(DirectorySongs, path.Remove(0, 7));
    }
    protected override void OnInitialized()
    {
        DirectorySongs = Path.Combine(Environment.ContentRootPath, "wwwroot/Songs");
        DirectoryVids = Path.Combine(Environment.ContentRootPath, "wwwroot/Vids");
        System.IO.Directory.CreateDirectory(DirectorySongs);
        System.IO.Directory.CreateDirectory(DirectoryVids);
        Song.AddSongsToList(DirectorySongs, ref SongList);
    }
    private void MuteUnmute()
    {
        if (Mute)
        {
            Mute = false;
        }
        else
        {
            Mute = true;
        }
    }
    private void PlayStop()
    {
        if (Play)
        {
            timer = new Timer(1000);
            timer.Elapsed += TimerOnElapsed;
            timer.Start();
            Play = false;
        }
        else
        {
            timer.Stop();
            Play = true;
        }
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        secCount++;
        if (secCount == 60)
        {
            secCount = 0;
            minCount++;
        }
        currentSec = secCount;
        currentMin = minCount;
        if (secCount < 10)
        {
            currenttime = "0" + currentMin.ToString() + ":" + "0" + currentSec.ToString();
        }
        else
        {
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
        }
    }
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
    private void AudioDuration(string FileFullPath)
    {
        TagLib.File file = TagLib.File.Create(FileFullPath);
        int s_time = (int)file.Properties.Duration.TotalSeconds;
        int s_minutes = s_time / 60;
        int s_seconds = s_time % 60;
        totalMin = s_minutes;
        totalSec = s_seconds;
        if (totalSec < 10)
        {
            duration = "0" + s_minutes.ToString() + ":" + "0" + s_seconds.ToString();
        }
        else
        {
            duration = "0" + s_minutes.ToString() + ":" + s_seconds.ToString();
        }
        if (duration == "00:00")
        {
            FileFullPath = Path.Combine(DirectoryVids, Songname + ".txt");
            using (StreamReader reader = new StreamReader(FileFullPath))
            {
                duration = reader.ReadLine();
            }
            string[] MinAndSec = duration.Split(':');
            totalMin = int.Parse(MinAndSec[0]);
            totalSec = int.Parse(MinAndSec[1]);
        }
    }
    private void getpercentaje()
    {
        double totaltime = (totalMin * 60) + totalSec;
        double currenttime = (currentMin * 60) + currentSec;
        double totalpercentaje = (currenttime / totaltime) * 100;
        percentaje = totalpercentaje;
        if (percentaje == 100 && Mute)
        {
            nextSong();
            PlayStop();
        }
    }
}