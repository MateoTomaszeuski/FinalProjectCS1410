@page "/"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Timers
@inject ILogger<Index> Logger
@inject IWebHostEnvironment Environment
@implements IDisposable

<html>

<head>
    <PageTitle>Cloud Music</PageTitle>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body>
    <header>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="top-row searchColor">
                        <div class="input-group">
                            <input @bind="SearchedSong" type="search" class="form-control rounded"
                                placeholder="Search your favorite music..." aria-label="Search"
                                aria-describedby="search-addon" />
                            <button type="button" class="btn" @onclick="SearchSong">
                                <i class="material-icons differentColor">search</i>
                            </button>
                        </div>
                        @if (!songwasfinded)
                        {

                            <h4>
                                <select class="form-control barNewColors" @onchange="SelectedSongChanged">

                                    @foreach (var Song in RecomendedSongList)
                                    {
                                        <option value="@Song"> @Song.Name</option>
                                    }
                                </select>
                            </h4>
                        }
                    </div>
                </div>
            </div>
        </div>
    </header>

    <main>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="player">
                        <div class="player-controls">
                            <div class="player-controls-left">
                                <div class="player-controls-left-item">
                                    <div class="player-controls-left-item-icon icon-bar">
                                        <a href="">
                                            <button class="playAndStopButton" @onclick="nextSong" @onmouseup="nextSong">
                                                <i class="material-icons differentColor">skip_next</i>
                                            </button>
                                        </a>
                                        <a class="borders" href="">
                                            <button class="playAndStopButton" @onclick="PlayStop">
                                                @if (!Play)
                                                {
                                                    <i class="material-icons differentColor">play_circle_filled</i>
                                                }
                                                else if (Play)
                                                {
                                                    <i class="material-icons differentColor">play_circle_filled</i>
                                                    //necesitamos un boton de pausa
                                                }
                                            </button>
                                        </a>
                                        <a href="">
                                            <button class="playAndStopButton" @onclick="MuteUnmute">
                                                <i class="material-icons differentColor">volume_off</i>
                                            </button>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <h1>
                <select class="form-control barNewColors" @onchange="SelectedSongChanged">

                    @foreach (var Song in SongList)
                    {
                        <option value="@Song"> @Song.Name</option>
                    }
                </select>
                @if (SelectedSongasString != "")
                {
                    <div class="row">
                        <div class="audio-player">
                            <div class="audio-wrapper" id="player-container" href="javascript:;"> </div>
                            <div class="player-controls scrubber">
                                <p>@Songname</p>
                                <span id="seek-obj-container">
                                    <div class="card-body">
                                        @if (!Play)
                                        {
                                            @if (!Mute)
                                            {
                                                <audio autoplay id="player" @ontimeupdate="displaytimeupdate" @onended="nextSong"
                                        @onpause="nextSong">
                                                    <source src="@path#t=00:@currenttime" />
                                                </audio>
                                                <div class="progress">
                                                    <div class="progress-bar" role="progressbar" style="width: @percentaje%"></div>
                                                </div>
                                                <div class="timeLine">
                                                    @timeline
                                                </div>
                                            }
                                            else if (Mute)
                                            {
                                                <audio autoplay id="player" @ontimeupdate="displaytimeupdate" @onended="nextSong"
                                        @onpause="nextSong">
                                                    <source src="/muted/zzz.mp3#t=00:@currenttime" />
                                                </audio>
                                                <div class="progress">
                                                    <div class="progress-bar" role="progressbar" style="width: @percentaje%"></div>
                                                </div>
                                                <div class="timeLine">
                                                    @timeline
                                                </div>
                                            }

                                        }
                                        else if (Play)
                                        {
                                            <audio muted id="player" @onactivate="displaytimeupdate">
                                                <source src="@path#t=00:@currenttime" />
                                            </audio>
                                            <div class="progress">
                                                <div class="progress-bar" role="progressbar" style="width: @percentaje%"></div>
                                            </div>
                                            <div class="timeLine">
                                                @timeline
                                            </div>
                                        }
                                    </div>
                                </span>
                            </div>
                        </div>
                    </div>
                }
            </h1>
        </div>
    </main>
    <footer>
        <div class="container">
            <div class="rows">
                <p class="copyright-text">Copyright &copy; 2022</p>
                <ul class="social-icons">
                    <li><a class="facebook" href="#"><i class="fa fa-facebook"></i></a></li>
                    <li><a class="twitter" href="#"><i class="fa fa-twitter"></i></a></li>
                    <li><a class="dribbble" href="#"><i class="fa fa-dribbble"></i></a></li>
                    <li><a class="linkedin" href="#"><i class="fa fa-linkedin"></i></a></li>
                </ul>
            </div>
        </div>
    </footer>
</body>

</html>
@code {
    private string? DirectorySongs;
    private string? pathMuted;
    public string SearchedSong { get; set; } = "";
    public string? SelectedSongasString { get; set; } = "";
    public Song SelectedSongasSong { get; set; }
    public string[]? NameAndPath { get; set; }
    public string? path { get; set; }
    public string? fullPath { get; set; }
    public string? Songname { get; set; }
    public string duration { get; set; } = "";
    public string currenttime { get; set; }
    public string timeline { get; set; }
    private int totalMin { get; set; }
    private int currentMin { get; set; } = 0;
    private int totalSec { get; set; }
    private int currentSec { get; set; } = 0;
    private int songpositon { get; set; } = -1;
    private double percentaje { get; set; }
    bool Play = true;
    bool Mute = false;
    bool songwasfinded = true;
    Timer timer;
    private void SearchSong()
    {
        for (int i = 0; i < SongList.Count; i++)
        {
            if (SearchedSong == SongList[i].Name)
            {
                songpositon = i;
                break;

            }
        }
        if (songpositon != -1)
        {
            string selectedSong = SongList[songpositon].ToString();
            string[] nameAndPath = new string[] { };
            string temppath = "";
            string songname = "";
            Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
            AssignValues(selectedSong, nameAndPath, temppath, songname);
            AudioDuration(fullPath);

            secCount = 0;
            minCount = 0;
            currentMin = 0;
            currentSec = 0;
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
            if (!Play) PlayStop();
            if (FistSelection)
            {
                FistSelection = false;
                PlayStop();
            }
        }
        else
        {
            RecomendedSongList.Clear();
            RecomendedSongList.Add(new Song("",""));
            songwasfinded = false;
            for (int i = 0; i < SongList.Count; i++)
            {
                if (SongList[i].Name.ToUpper().Contains(SearchedSong.ToUpper()))
                {
                    RecomendedSongList.Add(SongList[i]);
                }
            }
        }
    }
    private void displaytimeupdate()
    {
        timeline = currenttime + "/" + duration;
        getpercentaje();
    }
    List<Song> RecomendedSongList = new List<Song>();

    private void nextSong()
    {
        if (!Play)
        {
            PlayStop();
            for (int i = 0; i < SongList.Count; i++)
            {

                if (Songname == SongList[i].Name)
                {
                    songpositon = i;
                    break;
                }
            }
            string selectedSong;
            if (songpositon + 2 > SongList.Count)
            {
                selectedSong = SongList[1].ToString();
            }
            else
            {
                selectedSong = SongList[songpositon + 1].ToString();

            }
            string[] nameAndPath = new string[] { };
            string temppath = "";
            string songname = "";
            Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
            AssignValues(selectedSong, nameAndPath, temppath, songname);
            AudioDuration(fullPath);

            secCount = 0;
            minCount = 0;
            currentMin = 0;
            currentSec = 0;
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
        }
        else
        {
            PlayStop();
        }
    }
    private bool FistSelection = true;
    private void SelectedSongChanged(ChangeEventArgs e)
    {
        songwasfinded = true;
        string selectedSong;
        string[] nameAndPath = new string[] { };
        string temppath = "";
        string songname = "";
        selectedSong = (string?)e?.Value;
        Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
        AssignValues(selectedSong, nameAndPath, temppath, songname);

        AudioDuration(fullPath);
        secCount = 0;
        minCount = 0;
        currentSec = 0;
        currentMin = 0;
        if (!Play) PlayStop();
        if (FistSelection)
        {
            FistSelection = false;
            PlayStop();
        }
    }
    public void AssignValues(string selectedSong, string[] nameAndPath, string temppath, string songname)
    {
        SelectedSongasString = selectedSong;
        NameAndPath = nameAndPath;
        path = temppath;
        Songname = songname;
        SelectedSongasSong = new Song(songname, path);
        fullPath = Path.Combine(DirectorySongs, path.Remove(0, 7));
    }
    List<Song> SongList = new List<Song>();
    protected override void OnInitialized()
    {
        DirectorySongs = Path.Combine(Environment.ContentRootPath, "wwwroot/Songs");
        System.IO.Directory.CreateDirectory(DirectorySongs);

        Song.AddSongsToList(DirectorySongs, ref SongList);

    }
    private void MuteUnmute()
    {
        if (Mute)
        {
            Mute = false;
        }
        else
        {
            Mute = true;
        }
    }
    private void PlayStop()
    {
        if (Play)
        {
            timer = new Timer(1000);
            timer.Elapsed += TimerOnElapsed;
            timer.Start();
            Play = false;
        }
        else
        {
            timer.Stop();
            Play = true;
        }
    }
    private int secCount = 0;
    private int minCount = 0;
    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        secCount++;
        if (secCount == 60)
        {
            secCount = 0;
            minCount++;
        }
        currentSec = secCount;
        currentMin = minCount;
        if (secCount < 10)
        {
            currenttime = "0" + currentMin.ToString() + ":" + "0" + currentSec.ToString();
        }
        else
        {
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
        }
    }
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
    private void AudioDuration(string FileFullPath)
    {
        TagLib.File file = TagLib.File.Create(FileFullPath);
        int s_time = (int)file.Properties.Duration.TotalSeconds;
        int s_minutes = s_time / 60;
        int s_seconds = s_time % 60;
        totalMin = s_minutes;
        totalSec = s_seconds;
        if (totalSec < 10)
        {
            duration = "0" + s_minutes.ToString() + ":" + "0" + s_seconds.ToString();
        }
        else
        {
            duration = "0" + s_minutes.ToString() + ":" + s_seconds.ToString();
        }
    }

    private void getpercentaje()
    {
        double totaltime = (totalMin * 60) + totalSec;
        double currenttime = (currentMin * 60) + currentSec;
        double totalpercentaje = (currenttime / totaltime) * 100;
        percentaje = totalpercentaje;
    }
}