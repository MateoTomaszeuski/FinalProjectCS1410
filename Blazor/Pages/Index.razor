@page "/"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Timers
@inject ILogger<Index> Logger
@inject IWebHostEnvironment Environment
@implements IDisposable

<html>

<head>
    <PageTitle>Cloud Music</PageTitle>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body>
    <header>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="top-row searchColor">
                        <div class="input-group">
                            <input type="search" class="form-control rounded"
                                placeholder="Search your favorite music..." aria-label="Search"
                                aria-describedby="search-addon" />
                            <button type="button" class="btn">
                                <i class="material-icons differentColor">search</i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <main>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="player">
                        <div class="player-controls">
                            <div class="player-controls-left">
                                <div class="player-controls-left-item">
                                    <div class="player-controls-left-item-icon icon-bar">
                                        <a href="">
                                            <i class="material-icons differentColor">skip_next</i>
                                        </a>
                                        <a class="borders" href="">
                                            <button class="playAndStopButton" @onclick="PlayStop"> @(hidden ?
                                                "Play" :
                                                "Stop")
                                            </button>
                                        </a>
                                        <a href="">
                                            <i class="material-icons differentColor">volume_off</i>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <h1>
                <select class="form-control barNewColors" @onchange="SelectedSongChanged">

                    @foreach (var Song in SongList)
                    {
                        <option value="@Song"> @Song.Name</option>
                    }
                </select>
                @if (SelectedSong != "")
                {
                    <div class="row">
                        <div class="audio-player">
                            <div id="play-btn"></div>
                            <div class="audio-wrapper" id="player-container" href="javascript:;"> </div>
                            <div class="player-controls scrubber">
                                <p>@Songname</p>
                                <span id="seek-obj-container">
                                    <div class="card-body">
                                        @if (!hidden)
                                        {
                                            <audio autoplay id="player" @ontimeupdate="displaytimeupdate">
                                                <source src="@path" />
                                            </audio>
                                            <div class="progress">
                                                <div class="progress-bar" role="progressbar" style="width: @percentaje%"></div>
                                            </div>
                                            @timeline
                                        }
                                        else if (hidden)
                                        {
                                            <audio muted id="player">
                                                <source src="@path" />
                                            </audio>
                                            <div class="progress">
                                                <div class="progress-bar" role="progressbar" style="width: @percentaje%"></div>
                                            </div>
                                            @timeline

                                        }
                                    </div>
                                </span>
                            </div>
                        </div>
                    </div>
                }
            </h1>
        </div>
    </main>
    <footer>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <p class="copyright-text">Copyright &copy; 2022 All Rights Reserved
                    </p>
                    <ul class="social-icons">
                        <li><a class="facebook" href="#"><i class="fa fa-facebook"></i></a></li>
                        <li><a class="twitter" href="#"><i class="fa fa-twitter"></i></a></li>
                        <li><a class="dribbble" href="#"><i class="fa fa-dribbble"></i></a></li>
                        <li><a class="linkedin" href="#"><i class="fa fa-linkedin"></i></a></li>
                    </ul>
                </div>
            </div>
        </div>
    </footer>
</body>

</html>
@code {
    private string? DirectorySongs;
    public string? SelectedSong { get; set; } = "";
    public string[]? NameAndPath { get; set; }
    public string? path { get; set; }
    public string? fullPath { get; set; }
    public string? Songname { get; set; }
    public string duration { get; set; } = "not modified";
    public string currenttime { get; set; }
    public string timeline { get; set; }
    private int totalMin { get; set; }
    private int currentMin { get; set; }
    private int totalSec { get; set; }
    private int currentSec { get; set; }
    private double percentaje { get; set; }
    bool hidden = true;
    Timer timer = new Timer();
    private void displaytimeupdate()
    {
        timeline = currenttime + "/" + duration;
        getpercentaje();
    }    private void SelectedSongChanged(ChangeEventArgs e)
    {
        string selectedSong;
        string[] nameAndPath = new string[] { };
        string temppath = "";
        string songname = "";
        selectedSong = (string?)e?.Value;
        Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
        SelectedSong = selectedSong;
        NameAndPath = nameAndPath;
        path = temppath;
        Songname = songname;
        fullPath = Path.Combine(DirectorySongs, path.Remove(0, 7));

        AudioDuration(fullPath);
    }
    List<Song> SongList = new List<Song>();
    protected override void OnInitialized()
    {
        DirectorySongs = Path.Combine(Environment.ContentRootPath, "wwwroot/Songs");
        Song.AddSongsToList(DirectorySongs, ref SongList);
    }
    private void PlayStop()
    {
        if (hidden)
        {
            timer.Interval = 900;
            timer.Elapsed += TimerOnElapsed;
            timer.Start();
            hidden = false;
        }
        else
        {
            hidden = true;
            atCall = DateTime.MinValue;
            timer.Stop();
        }
    }
    DateTime atCall = DateTime.MinValue;
    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        if (atCall == DateTime.MinValue)
        {
            atCall = e.SignalTime;
        }
        TimeSpan zero = DateTime.Now - atCall;
        currentMin = zero.Minutes;
        currentSec = zero.Seconds;
        currenttime = Path.Combine(zero.Minutes + ":" + zero.Seconds);
    }
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
    private void AudioDuration(string FileFullPath)
    {
        TagLib.File file = TagLib.File.Create(FileFullPath);
        int s_time = (int)file.Properties.Duration.TotalSeconds;
        int s_minutes = s_time / 60;
        int s_seconds = s_time % 60;
        totalMin = s_minutes;
        totalSec = s_seconds;
        duration = s_minutes.ToString() + ":" + s_seconds.ToString();
    }

    private void getpercentaje()
    {
        double totaltime = (totalMin * 60) + totalSec;
        double currenttime = (currentMin * 60) + currentSec;
        double totalpercentaje = (currenttime / totaltime) * 100;
        percentaje = totalpercentaje;
    }
}