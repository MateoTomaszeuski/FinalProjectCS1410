@page "/songUpload"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject ILogger<SongUpload> Logger
@inject IWebHostEnvironment Environment

<head>
    <PageTitle>Music Player</PageTitle>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">

</head>

<h3>Upload Files</h3>

<p>
<h4>
    Choose up to @maxAllowedFiles songs up to @maxFileSizeInMegabytes Megabytes:
</h4>
</p>
<InputFile OnChange="@LoadFiles" multiple />

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>@if (loadedFiles.Count > 0)
        {
            <h5>Uploaded Songs:</h5>
        }
        @foreach (var song in loadedFiles)
        {
            <ul>
                <li>Name: @song.Name</li>
            </ul>

        }
    </ul>
    <ul>
        @if (InvalidLoadedFiles.Count > 0)
        {
            <h5>Invalid Files:</h5>
        }
        @foreach (var file in InvalidLoadedFiles)
        {
            <ul>
                <li>Name: @file.Name: @Error</li>

            </ul>

        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private List<IBrowserFile> InvalidLoadedFiles = new();
    private long maxFileSizeInMegabytes = (1024 * 1024 * 1024) / 1048576;
    private long maxFileSize = 1024 * 1024 * 1024;
    private int maxAllowedFiles = 50;
    private string ValidContentType = "audio/mpeg";
    private string Error ="";
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        InvalidLoadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (file.ContentType == ValidContentType && file.Size <= maxFileSize)
            {

                loadedFiles.Add(file);
                var path = Path.Combine(Environment.ContentRootPath, "../Songs", file.Name);
                
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            }
            else if (file.ContentType != ValidContentType)
            {
                InvalidLoadedFiles.Add(file);
                Error = "Invalid Format type";
            }
            else if (file.Size > maxFileSize)
            {
                InvalidLoadedFiles.Add(file);
                Error = "Invalid Size";

            }

        }

        isLoading = false;
    }

}
