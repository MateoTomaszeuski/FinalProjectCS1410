@page "/songs"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Timers
@inject ILogger<Songs> Logger
@inject IWebHostEnvironment Environment
@implements IDisposable


<head>
    <PageTitle>Songs</PageTitle>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body>
    <header>

    </header>
    <main>
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <table class="table table-striped">
                        <thead>
                            <tr class="bar2">
                                <th>
                                    <h1>
                                        <i class="material-icons">
                                            music_note
                                        </i>
                                        Songs List
                                    </h1>
                                </th>
                                <th>
                                    <div class="top-row searchColor">
                                        <div class="input-group">
                                            <input @bind="inputSong" type="search" class="form-control rounded"
                                                placeholder="Search your favorite song..." aria-label="Search"
                                                aria-describedby="search-addon" />
                                            <button class="btn" @onclick="() => GetSelectedSong(inputSong)">
                                                <i class="material-icons differentColor">search</i>
                                            </button>

                                        </div>
                                    </div>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!songwasfinded)
                            {
                                <h4>
                                    Are you looking for:
                                </h4>
                                @foreach (var Song in RecomendedSongList)
                                {
                                    <tr>
                                        <th>
                                            @if (Song.Name != "")
                                            {
                                                <button class="btnSong" @onclick="(() => {GetSelectedSong(Song.Name); PlaySong(); })">
                                                    @Song.Name</button>
                                            }
                                        </th>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var song in @SongList)
                                {
                                    <tr>
                                        <th>
                                            @if (song.Name != "")
                                            {
                                                <button class="btnSong" @onclick="(() => {GetSelectedSong(song.Name); PlaySong(); })">
                                                    @song.Name</button>
                                            }
                                        </th>
                                    </tr>
                                }
                                <p>@Songname</p>
                                @if (!Play)
                                {
                                    <audio autoplay id="player" @ontimeupdate="displaytimeupdate" @onended="nextSong"
                                @onpause="nextSong">
                                        <source src="@path" />
                                    </audio>
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" style="width: @percentaje%"></div>
                                    </div>
                                    <div class="timeLine">
                                        @timeline

                                    </div>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>
    <footer>
        <div class="container">
            <div class="rows">
                <p class="copyright-text">Copyright MT & JS &copy; 2022</p>
                <ul class="social-icons">
                    <li><a class="facebook" href="https://www.facebook.com/"><i class="fa fa-facebook"></i></a></li>
                    <li><a class="twitter" href="https://www.twitter.com/"><i class="fa fa-twitter"></i></a></li>
                    <li><a class="dribbble" href="https://www.dribbble.com/"><i class="fa fa-dribbble"></i></a></li>
                    <li><a class="whatsapp" href="https://www.whatsapp.com/"><i class="fa fa-whatsapp"></i></a></li>
                    <li><a class="instagram" href="https://www.instagram.com/"><i class="fa fa-instagram"></i></a></li>
                </ul>
            </div>
        </div>
    </footer>
</body>

@code {
    private static List<Song> SongList = new();
    private static List<Song> RecomendedSongList = new();
    private string inputSong { get; set; }
    private string SelectedSongasString { get; set; }
    private string[] NameAndPath { get; set; }
    private string path { get; set; }
    private string Songname { get; set; }
    private Song SelectedSongasSong { get; set; }
    private int songpositon { get; set; } = -1;
    bool Play = true;
    bool songwasfinded = true;
    public Timer timer { get; set; } = new Timer();

    private void GetSelectedSong(string SearchedSong)
    {
        for (int i = 0; i < SongList.Count; i++)
        {
            if (SearchedSong == SongList[i].Name)
            {
                songpositon = i;
            }
        }
        if (songpositon != -1)
        {
            string selectedSong = SongList[songpositon].ToString();
            string[] nameAndPath = new string[] { };
            string temppath = "";
            string songname = "";
            Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
            AssignValues(selectedSong, nameAndPath, temppath, songname);
            AudioDuration(fullPath);
        }
        else
        {
            RecomendedSongList.Clear();
            RecomendedSongList.Add(new Song("", ""));
            songwasfinded = false;
            for (int i = 0; i < SongList.Count; i++)
            {
                if (SongList[i].Name.ToUpper().Contains(SearchedSong.ToUpper()))
                {
                    RecomendedSongList.Add(SongList[i]);
                }
            }
        }

    }
    private string fullPath { get; set; }
    private void nextSong()
    {
        if (!Play)
        {
            PlaySong();
            for (int i = 0; i < SongList.Count; i++)
            {

                if (Songname == SongList[i].Name)
                {
                    songpositon = i;
                    break;
                }
            }
            string selectedSong;
            if (songpositon + 2 > SongList.Count)
            {
                selectedSong = SongList[1].ToString();
            }
            else
            {
                selectedSong = SongList[songpositon + 1].ToString();

            }
            string[] nameAndPath = new string[] { };
            string temppath = "";
            string songname = "";
            Song.GetNameandPath(ref selectedSong!, ref nameAndPath!, ref temppath, ref songname);
            AssignValues(selectedSong, nameAndPath, temppath, songname);
            AudioDuration(fullPath);

            secCount = 0;
            minCount = 0;
            currentMin = 0;
            currentSec = 0;
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
        }
        else
        {
            PlaySong();
        }
    }
    public void AssignValues(string selectedSong, string[] nameAndPath, string temppath, string songname)
    {
        SelectedSongasString = selectedSong;
        NameAndPath = nameAndPath;
        path = temppath;
        Songname = songname;
        SelectedSongasSong = new Song(songname, path);
        fullPath = Path.Combine(DirectorySongs, path.Remove(0, 7));
    }
    public void PlaySong()
    {
        if (Play)
        {
            songwasfinded = true;
            secCount = 0;
            minCount = 0;
            currentMin = 0;
            currentSec = 0;
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();

            timer = new Timer(1000);
            timer.Elapsed += TimerOnElapsed;
            timer.Start();
            Play = false;
        }
        else
        {

            secCount = 0;
            minCount = 0;
            currentMin = 0;
            currentSec = 0;
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
            timer.Stop();
            Play = true;
        }

    }
    public void GetSongs()
    {
        Song.AddSongsToList(DirectorySongs, ref SongList);
    }
    public string DirectorySongs { get; set; }
    protected override void OnInitialized()
    {
        DirectorySongs = Path.Combine(Environment.ContentRootPath, "wwwroot/Songs");
        GetSongs();
    }
    private int secCount { get; set; } = 0;
    private int minCount { get; set; } = 0;
    private int currentMin { get; set; }
    private int currentSec { get; set; }
    private string currenttime { get; set; }
    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        secCount++;
        if (secCount == 60)
        {
            secCount = 0;
            minCount++;
        }
        currentSec = secCount;
        currentMin = minCount;
        if (secCount < 10)
        {
            currenttime = "0" + currentMin.ToString() + ":" + "0" + currentSec.ToString();
        }
        else
        {
            currenttime = "0" + currentMin.ToString() + ":" + currentSec.ToString();
        }
    }
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
    private int totalMin { get; set; }
    private int totalSec { get; set; }
    private string duration { get; set; }

    private void AudioDuration(string FileFullPath)
    {
        TagLib.File file = TagLib.File.Create(FileFullPath);
        int s_time = (int)file.Properties.Duration.TotalSeconds;
        int s_minutes = s_time / 60;
        int s_seconds = s_time % 60;
        totalMin = s_minutes;
        totalSec = s_seconds;
        if (totalSec < 10)
        {
            duration = "0" + s_minutes.ToString() + ":" + "0" + s_seconds.ToString();
        }
        else
        {
            duration = "0" + s_minutes.ToString() + ":" + s_seconds.ToString();
        }
    }
    public double percentaje { get; set; }
    public string timeline { get; set; }
    private void getpercentaje()
    {
        double totaltime = (totalMin * 60) + totalSec;
        double currenttime = (currentMin * 60) + currentSec;
        double totalpercentaje = (currenttime / totaltime) * 100;
        percentaje = totalpercentaje;
    }
    private void displaytimeupdate()
    {
        timeline = currenttime + "/" + duration;
        getpercentaje();
    }
}
